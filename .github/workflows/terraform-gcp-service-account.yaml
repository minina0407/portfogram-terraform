name: Terraform - customer-gcp-service-account

on:
  # Push 이벤트 발생 시 , 트리거
  push:
    branches:
      - main
    paths:
      - .github/workflows/terraform-gcp-service-account.yaml
      - terraform/dev/gcp/service_account/**
  ## Pull Request Events 발생 시 , 트리거
  pull_request:
    paths:
      - .github/workflows/terraform-gcp-service-account.yaml
      - terraform/dev/gcp/service_account/**

jobs:
  terraform_ci:
    name: 'Terraform CI/CD'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Terraform Format and Style 검사
      - name: Terraform Format and Style
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Initialization
        id: init
        run: terraform init
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=plan.tfplan
        continue-on-error: true

      - name: Terraform Validation
        id: validate
        run: terraform validate
        continue-on-error: true

      # Terraform plan 결과 출력
      - name: Show Plan
        if: steps.plan.outcome == 'success'
        run: terraform show -json plan.tfplan | jq .

      - name: Create GitHub Comment
        id: create_comment
        uses: actions/github-script@v3
        with:
          script: |
            const fmtStatus = steps.fmt.outcome == 'success' ? '📝 success' : '❌ failure';
            const initStatus = steps.init.outcome == 'success' ? '🔅 success' : '❌ failure';
            const planStatus = steps.plan.outcome == 'success' ? '📋 success' : '❌ failure';
            const validateStatus = steps.validate.outcome == 'success' ? '🌐 success' : '❌ failure';
            const pusher = github.actor;
            const action = github.event_name;

            const commentBody = `
            **ffm-prd-svc-harbor**

            - Terraform Format and Style 📝 ${fmtStatus}
            - Terraform Initialization 🔅 ${initStatus}
            - Terraform Plan 📋 ${planStatus}
            - Terraform Validation 🌐 ${validateStatus}

            Pusher: @${pusher}, Action: ${action}
            `;

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: commentBody
            });
      # main 브랜치로 푸시될 때 Terraform 적용
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve plan.tfplan

      # 개발 환경에서만 Terraform 리소스 정리(destroy) 실행
      - name: Clean up
        if: always() && env.TF_ENVIRONMENT == 'dev'
        run: |
          terraform destroy -auto-approve
        env:
          TF_SSH_PRIVATE_KEY: ${{ secrets.TF_SSH_PRIVATE_KEY }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          TF_ENVIRONMENT: ${{ secrets.TF_ENVIRONMENT }}
